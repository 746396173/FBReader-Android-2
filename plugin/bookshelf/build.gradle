buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:1.3.0'
	}
}

apply plugin: 'com.android.application'

dependencies {
	compile 'com.android.support:cardview-v7:23.+'
	compile 'com.google.android.gms:play-services-ads:8.1.+'
	compile project(':third-party/VNTNumberPickerPreference')
	compile project(':third-party/patches')
	compile project(':fbreader/zip-amse')
	compile project(':fbreader/common')
}

android {
	compileSdkVersion 23
	buildToolsVersion '23.0.1'
	useLibrary 'org.apache.http.legacy'

	lintOptions {
		abortOnError false
	}

	defaultConfig {
		minSdkVersion 11
		targetSdkVersion 21
		versionCode 0
		versionName new File("$projectDir/VERSION").text.trim()
	}

	sourceSets {
		main.java.srcDirs = ['src/main/java']
		main.res.srcDirs = ['src/main/res']
	}

	signingConfigs {
		release {
			storeFile file(RELEASE_STORE_FILE)
			storePassword RELEASE_STORE_PASSWORD
			keyAlias RELEASE_KEY_ALIAS
			keyPassword RELEASE_KEY_PASSWORD
		}
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
			signingConfig signingConfigs.release

			buildConfigField "String", "PUBLIC_KEY", "${BOOKSHELF_PLUGIN_PUBLIC_KEY}"
		}
	}
}

android.applicationVariants.all { variant ->
	def version = new File("$projectDir/VERSION").text.trim()
	if (version.matches('\\d*\\.\\d*')) {
		def parts = version.split('\\.')
		variant.mergedFlavor.versionCode = parts[0].toInteger() * 100000 + parts[1].toInteger() * 1000
	} else if (version.matches('\\d*\\.\\d*\\.\\d*')) {
		def parts = version.split('\\.')
		variant.mergedFlavor.versionCode = parts[0].toInteger() * 100000 + parts[1].toInteger() * 1000 + parts[2].toInteger() * 10
	} else {
		throw new IllegalArgumentException('Unsupported version format: ' + version)
	}
}
