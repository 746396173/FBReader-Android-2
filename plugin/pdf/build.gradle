buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:1.3.0'
	}
}

apply plugin: 'com.android.application'

dependencies {
	compile project(':plugin/image-formats')
	compile project(':third-party/radaee')
}

android {
	compileSdkVersion 23
	buildToolsVersion '23.0.1'

	lintOptions {
		abortOnError false
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_7
		targetCompatibility JavaVersion.VERSION_1_7
	}

	sourceSets {
		main.java.srcDirs = ['src/main/java']
		main.aidl.srcDirs = ['src/main/java']
		main.res.srcDirs = ['src/main/res']
		main.manifest.srcFile 'src/main/AndroidManifest.xml'
	}

	signingConfigs {
		release {
			storeFile file(RELEASE_STORE_FILE)
			storePassword RELEASE_STORE_PASSWORD
			keyAlias RELEASE_KEY_ALIAS
			keyPassword RELEASE_KEY_PASSWORD
		}
	}

	defaultConfig {
		minSdkVersion 11
		targetSdkVersion 17
		versionCode 0
		versionName "1.5.1"
	}

	buildTypes {
		release {
			minifyEnabled false
			signingConfig signingConfigs.release
		}
	}
}

android {
	flavorDimensions 'abi'

	productFlavors {
		fat {
			dimension 'abi'
			ndk {
				abiFilters 'x86', 'armeabi-v7a', 'armeabi', 'mips'
				versionCode 0
			}
		}
		arm {
			dimension 'abi'
			ndk {
				abiFilter 'armeabi'
				versionCode 1
			}
		}
		armv7a {
			dimension 'abi'
			ndk {
				abiFilter 'armeabi-v7a'
				versionCode 2
			}
		}
		x86 {
			dimension 'abi'
			ndk {
				abiFilter 'x86'
				versionCode 3
			}
		}
		mips {
			dimension 'abi'
			ndk {
				abiFilter 'mips'
				versionCode 4
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
			signingConfig signingConfigs.release
		}
	}
}

android.applicationVariants.all { variant ->
	def abiVersion = variant.productFlavors.get(0).versionCode

	def baseCode = 0
	def version = versionName
	if (version.matches('\\d*\\.\\d* beta \\d*')) {
		def parts = version.split('[ .]')
		baseCode = parts[0].toInteger() * 1000000 + parts[1].toInteger() * 10000 - 5000 + parts[3].toInteger() * 100
	} else if (version.matches('\\d*\\.\\d*\\.\\d*')) {
		def parts = version.split('\\.')
		baseCode = parts[0].toInteger() * 1000000 + parts[1].toInteger() * 10000 + parts[2].toInteger() * 100
	} else if (version.matches('\\d*\\.\\d*')) {
		def parts = version.split('\\.')
		baseCode = parts[0].toInteger() * 1000000 + parts[1].toInteger() * 10000
	} else {
		throw new IllegalArgumentException('Unsupported version format: ' + version)
	}

	variant.mergedFlavor.versionCode = baseCode + abiVersion
}
